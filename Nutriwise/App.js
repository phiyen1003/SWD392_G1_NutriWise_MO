import { StatusBar } from "expo-status-bar";
import { useState, useEffect } from "react";
import { StyleSheet, Text, View, Button, Alert } from "react-native";
import * as Notifications from "expo-notifications";
import * as Clipboard from "expo-clipboard";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { NavigationContainer } from "@react-navigation/native";
import { Ionicons } from "@expo/vector-icons";

// M√†n h√¨nh Home (Hi·ªÉn th·ªã Expo Push Token)
const HomeScreen = () => {
  const [expoPushToken, setExpoPushToken] = useState(null);
  const [errorMsg, setErrorMsg] = useState("");

  useEffect(() => {
    async function registerForPushNotifications() {
      try {
        const { status } = await Notifications.getPermissionsAsync();
        console.log("üîç Quy·ªÅn th√¥ng b√°o:", status);
        
        if (status !== "granted") {
          const { status: newStatus } = await Notifications.requestPermissionsAsync();
          console.log("üîÑ Y√™u c·∫ßu quy·ªÅn m·ªõi:", newStatus);
          if (newStatus !== "granted") {
            setErrorMsg("Kh√¥ng c√≥ quy·ªÅn nh·∫≠n th√¥ng b√°o!");
            return;
          }
        }

        const tokenData = await Notifications.getExpoPushTokenAsync();
        console.log("‚úÖ Expo Push Token:", tokenData);

        if (tokenData.data) {
          setExpoPushToken(tokenData.data);
        } else {
          setErrorMsg("Kh√¥ng l·∫•y ƒë∆∞·ª£c token, th·ª≠ l·∫°i sau!");
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y token:", error);
        setErrorMsg("L·ªói khi l·∫•y token.");
      }
    }

    registerForPushNotifications();
  }, []);

  const copyToClipboard = async () => {
    if (expoPushToken) {
      await Clipboard.setStringAsync(expoPushToken);
      Alert.alert("ƒê√£ sao ch√©p!", "Token ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o clipboard.");
    } else {
      Alert.alert("L·ªói", "Token ch∆∞a ƒë∆∞·ª£c t·∫°o, h√£y th·ª≠ l·∫°i sau.");
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Expo Push Token:</Text>
      <Text style={styles.token}>
        {expoPushToken ? expoPushToken : "ƒêang l·∫•y token..."}
      </Text>
      {errorMsg ? <Text style={styles.error}>{errorMsg}</Text> : null}
      <Button title="Copy Token" onPress={copyToClipboard} />
    </View>
  );
};

// M√†n h√¨nh Profile
const ProfileScreen = () => (
  <View style={styles.container}>
    <Text style={styles.text}>H·ªì s∆° c√° nh√¢n</Text>
  </View>
);

// M√†n h√¨nh Settings
const SettingsScreen = () => (
  <View style={styles.container}>
    <Text style={styles.text}>C√†i ƒë·∫∑t</Text>
  </View>
);

// Khai b√°o Tab Navigator
const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator
        screenOptions={({ route }) => ({
          tabBarIcon: ({ color, size }) => {
            let iconName;
            if (route.name === "Home") {
              iconName = "home";
            } else if (route.name === "Profile") {
              iconName = "person";
            } else if (route.name === "Settings") {
              iconName = "settings";
            }
            return <Ionicons name={iconName} size={size} color={color} />;
          },
          tabBarActiveTintColor: "#007AFF",
          tabBarInactiveTintColor: "gray",
        })}
      >
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Profile" component={ProfileScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
    padding: 20,
  },
  text: {
    fontSize: 18,
    fontWeight: "bold",
  },
  token: {
    marginTop: 10,
    fontSize: 14,
    color: "blue",
  },
  error: {
    color: "red",
    marginTop: 10,
  },
});
